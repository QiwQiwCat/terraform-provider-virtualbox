package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"strconv"
)

var (
	_ resource.Resource                = &vmResource{}
	_ resource.ResourceWithImportState = &vmResource{}
)

type vmResource struct{}

type vmResourceModel struct {
	UUID   types.String `tfsdk:"uuid"`
	Name   types.String `tfsdk:"name"`
	Cpus   types.Int32  `tfsdk:"cpus"`
	Memory types.Int64  `tfsdk:"memory"`
	OsType types.String `tfsdk:"ostype"`
}

func (r *vmResource) Metadata(ctx context.Context, request resource.MetadataRequest, response *resource.MetadataResponse) {
	response.TypeName = request.ProviderTypeName + "_vm"
}

func (r *vmResource) Schema(ctx context.Context, request resource.SchemaRequest, response *resource.SchemaResponse) {
	response.Schema = schema.Schema{
		Description: "Create a new Virtual Machine using and register the VM with your Oracle VM VirtualBox installation.",
		Attributes: map[string]schema.Attribute{
			"uuid": schema.StringAttribute{
				Description: "The UUID of the Virtual Machine. This is generated by VirtualBox when the VM is created.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Description: "The name of the Virtual Machine to create.",
				Required:    true,
			},
			"cpus": schema.Int32Attribute{
				Required:    true,
				Description: "The number of virtual CPUs to assign to the Virtual Machine.",
			},
			"memory": schema.Int64Attribute{
				Required:    true,
				Description: "The amount of memory (in MB) to assign to the Virtual Machine.",
			},
			"ostype": schema.StringAttribute{
				Description: "The OS type to assign to the Virtual Machine. This should match one of the available OS types in your VirtualBox installation.",
				Computed:    true,
			},
		},
	}
}

func (r *vmResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	// Retrieve values from plan
	var plan vmResourceModel
	diags := request.Plan.Get(ctx, &plan)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}

	vmName := plan.Name.ValueString()
	vmMemory := plan.Memory.ValueInt64()
	vmCpus := plan.Cpus.ValueInt32()

	// 1. Create VM
	if err := RunVBoxManage("createvm", "--name", vmName, "--register"); err != nil {
		response.Diagnostics.AddError(
			"Error creating VM",
			"Could not create virtual machine, unexpected error: "+err.Error(),
		)
		return
	}

	// 2. Modify VM settings
	if err := RunVBoxManage("modifyvm", vmName, "--memory", fmt.Sprintf("%d", vmMemory), "--cpus", fmt.Sprintf("%d", vmCpus)); err != nil {
		response.Diagnostics.AddError(
			"Error modifying VM",
			"Could not modify virtual machine, unexpected error: "+err.Error(),
		)
		return
	}

	// Map response body to schema and populate Computed attribute values
	output, err := RunVBoxManageWithOutput("showvminfo", vmName, "--machinereadable")
	if err != nil {
		response.Diagnostics.AddError(
			"Error reading VM",
			"Could not read virtual machine information, unexpected error: "+err.Error(),
		)
		return
	}

	// Parse the output to get the UUID and other details
	vmInfo := ParseShowVMInfo(output)

	plan.UUID = types.StringValue(GetVMInfoFromOutput(vmInfo, "UUID"))
	plan.OsType = types.StringValue(GetVMInfoFromOutput(vmInfo, "ostype"))

	// Set state to fully populated data
	diags = response.State.Set(ctx, plan)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}
}

func (r *vmResource) Read(ctx context.Context, request resource.ReadRequest, response *resource.ReadResponse) {
	// Get current state
	var state vmResourceModel
	diags := request.State.Get(ctx, &state)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}

	vmUuid := state.UUID.ValueString()

	output, err := RunVBoxManageWithOutput("showvminfo", vmUuid, "--machinereadable")
	if err != nil {
		response.Diagnostics.AddError(
			"Error reading VM",
			"Could not read virtual machine information, unexpected error: "+err.Error(),
		)
		return
	}

	// Parse the output to get the UUID and other details
	vmInfo := ParseShowVMInfo(output)

	// Overwrite data with refreshed state
	integerValueCpus, err := strconv.Atoi(GetVMInfoFromOutput(vmInfo, "cpus"))
	if err != nil {
		response.Diagnostics.AddError(
			"Error parsing CPUs",
			"Could not parse CPUs from virtual machine information, unexpected error: "+err.Error(),
		)
		return
	}
	integerValueMemory, err := strconv.Atoi(GetVMInfoFromOutput(vmInfo, "memory"))
	if err != nil {
		response.Diagnostics.AddError(
			"Error parsing Memory",
			"Could not parse Memory from virtual machine information, unexpected error: "+err.Error(),
		)
		return
	}

	state.Name = types.StringValue(GetVMInfoFromOutput(vmInfo, "name"))
	state.Cpus = types.Int32Value(int32(integerValueCpus))
	state.Memory = types.Int64Value(int64(integerValueMemory))
	state.UUID = types.StringValue(GetVMInfoFromOutput(vmInfo, "UUID"))
	state.OsType = types.StringValue(GetVMInfoFromOutput(vmInfo, "ostype"))

	// Set refreshed state
	diags = response.State.Set(ctx, &state)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}
}

func (r *vmResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	// Retrieve values from plan
	var plan vmResourceModel
	diags := request.Plan.Get(ctx, &plan)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}

	vmUuid := plan.UUID.ValueString()

	vmName := plan.Name.ValueString()
	if err := RunVBoxManage("modifyvm", vmUuid, "--name", vmName); err != nil {
		response.Diagnostics.AddError(
			"Error updating VM Name",
			"Could not update virtual machine name, unexpected error: "+err.Error(),
		)
		return
	}

	vmMemory := plan.Memory.ValueInt64()
	if err := RunVBoxManage("modifyvm", vmUuid, "--memory", fmt.Sprintf("%d", vmMemory)); err != nil {
		response.Diagnostics.AddError(
			"Error updating VM Memory",
			"Could not update virtual machine memory, unexpected error: "+err.Error(),
		)
		return
	}

	vmCpus := plan.Cpus.ValueInt32()
	if err := RunVBoxManage("modifyvm", vmUuid, "--cpus", fmt.Sprintf("%d", vmCpus)); err != nil {
		response.Diagnostics.AddError(
			"Error updating VM CPUs",
			"Could not update virtual machine CPUs, unexpected error: "+err.Error(),
		)
		return
	}

	// refresh state
	output, err := RunVBoxManageWithOutput("showvminfo", vmUuid, "--machinereadable")
	if err != nil {
		response.Diagnostics.AddError(
			"Error reading VM",
			"Could not read virtual machine information, unexpected error: "+err.Error(),
		)
		return
	}

	// Parse the output to get the UUID and other details
	vmInfo := ParseShowVMInfo(output)

	// Overwrite data with refreshed state
	integerValueCpus, err := strconv.Atoi(GetVMInfoFromOutput(vmInfo, "cpus"))
	if err != nil {
		response.Diagnostics.AddError(
			"Error parsing CPUs",
			"Could not parse CPUs from virtual machine information, unexpected error: "+err.Error(),
		)
		return
	}

	integerValueMemory, err := strconv.Atoi(GetVMInfoFromOutput(vmInfo, "memory"))
	if err != nil {
		response.Diagnostics.AddError(
			"Error parsing Memory",
			"Could not parse Memory from virtual machine information, unexpected error: "+err.Error(),
		)
		return
	}

	cpus := int32(integerValueCpus)
	memory := int64(integerValueMemory)

	plan.Name = types.StringValue(GetVMInfoFromOutput(vmInfo, "name"))
	plan.Cpus = types.Int32Value(cpus)
	plan.Memory = types.Int64Value(memory)
	plan.OsType = types.StringValue(GetVMInfoFromOutput(vmInfo, "ostype"))

	diags = response.State.Set(ctx, plan)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}
}

func (r *vmResource) Delete(ctx context.Context, request resource.DeleteRequest, response *resource.DeleteResponse) {
	// Retrieve values from state
	var state vmResourceModel
	diags := request.State.Get(ctx, &state)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}

	if err := RunVBoxManage("unregistervm", state.UUID.ValueString(), "--delete-all"); err != nil {
		response.Diagnostics.AddError(
			"Error deleting VM",
			"Could not delete virtual machine, unexpected error: "+err.Error(),
		)
		return
	}
}

func (r *vmResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("uuid"), req, resp)
}

func NewVmResource() resource.Resource {
	return &vmResource{}
}
